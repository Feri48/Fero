import streamlit as st  # Streamlit: egyszer≈± webes fel√ºletet k√©sz√≠thetsz vele Pythonb√≥l
import pandas as pd     # Pandas: t√°bl√°zatos adatokhoz (itt nem felt√©tlen√ºl sz√ºks√©ges)
# import pdb              # debugol√°shoz   #pdb.set_trace()   #nyomk√∂vet√©s

# Akkumul√°tor teljes√≠tm√©ny t√°bl√°zat (Watt) k√ºl√∂nb√∂z≈ë id≈ëtartamokra, 1 db akkura
# Minden t√≠pushoz 6 √©rt√©k tartozik: 5, 10, 15, 30, 45, 60 perc
BATTERY_DATA = {
    "Sunstone SPT12-9":   [338.82, 227.04, 174.3, 102.06, 78.72, 62.64],
    "Sunstone SPT12-12":  [457.56, 306.6, 235.38, 142.2, 106.32, 84.54],
    "Sunstone SPT12-18":  [685.8, 459.66, 352.86, 213.18, 159.36, 126.78],
    "Sunstone ML12-26":   [873, 587.4, 490.2, 295.8, 223.8, 191.28],
    "Sunstone ML12-38":   [1352.22, 914.58, 751.2, 453.9, 342.66, 278.22],
    "Sunstone ML12-55":   [1902.6, 1293, 1062, 642, 487.2, 398.4],
    "Sunstone ML12-70":   [2491.2, 1684.8, 1383.6, 836.4, 631.2, 512.4],
    "Sunstone ML12-90":   [3168.6, 2143.2, 1760.4, 1063.8, 807.6, 655.2],
    "Sunstone ML12-110":  [3831, 2665.2, 2188.8, 1393.2, 989.4, 796.2],
}

time_options = [5, 10, 15, 30, 45, 60]  # Lehets√©ges √°thidal√°si id≈ëk (percben)
EFFICIENCY = 0.95  # Hat√°sfok (vesztes√©gek miatt nem 100%)

def get_power_for_time(battery_type, minutes):
    """
    Visszaadja az adott akku t√≠pushoz √©s id≈ëtartamhoz tartoz√≥ teljes√≠tm√©nyt (Watt).
    Ha nem l√©tezik ilyen id≈ëtartam, None-t ad vissza.
    """
    if minutes not in time_options:
        return None
    index = time_options.index(minutes)  # Megkeress√ºk, h√°nyadik az adott id≈ëtartam a list√°ban
    return BATTERY_DATA[battery_type][index]  # Kivessz√ºk a megfelel≈ë teljes√≠tm√©nyt

    """
     def get_previous_power(battery_type, minutes):
    
    #El≈ëz≈ë id≈ëtartamhoz tartoz√≥ teljes√≠tm√©ny lek√©rdez√©se.
    #Ha az els≈ë elem, ugyanazt adja vissza.
    
    index = time_options.index(minutes)
    if index == 0:
        return BATTERY_DATA[battery_type][0]
       
    return BATTERY_DATA[battery_type][index - 1]
    """
def get_previous_power_and_time(battery_type, minutes):
    """
    El≈ëz≈ë id≈ëtartamhoz tartoz√≥ teljes√≠tm√©ny √âS az id≈ë lek√©rdez√©se.
    Ha az els≈ë elem, ugyanazt adja vissza.
    """
    index = time_options.index(minutes)
    if index == 0:
        return time_options[0], BATTERY_DATA[battery_type][0]
    return time_options[index - 1], BATTERY_DATA[battery_type][index - 1]

def calculate_energy_based_backup_time(load_kw, battery_type, battery_count, selected_time):
    """
    Kisz√°m√≠tja, hogy adott terhel√©s, akku t√≠pus, darabsz√°m √©s id≈ëtartam mellett
    mennyi lesz a val√≥s √°thidal√°si id≈ë, 1 akkub√≥l mennyi energia vehet≈ë ki, stb.
    Visszat√©r√©si √©rt√©kek: (√°thidal√°si id≈ë percben, 1 akku teljes√≠tm√©nye, 1 akku energiatartalma Wh-ban)
    """
    index = time_options.index(selected_time)
    power_per_batt = BATTERY_DATA[battery_type][index]  # 1 db akku adott idej≈± teljes√≠tm√©nye (W)
    time_hours = selected_time / 60                     # perc -> √≥ra
    energy_per_batt = power_per_batt * time_hours       # 1 akku energiatartalma Wh-ban
    total_energy = energy_per_batt * battery_count * EFFICIENCY  # √∂sszes kihaszn√°lhat√≥ energia (Wh), hat√°sfokkal
    backup_time_minutes = (total_energy / (load_kw * 1000)) * 60 # Mennyi ideig b√≠rja a rendszer a terhel√©st
    return round(backup_time_minutes, 2), round(power_per_batt, 2), round(energy_per_batt, 2)

def calculate_required_battery_count(load_kw, battery_type, selected_time, target_minutes):
    """
    Kisz√°m√≠tja, hogy adott terhel√©s, akku t√≠pus, id≈ëtartam √©s c√©l √°thidal√°si id≈ë mellett
    h√°ny darab akkura van sz√ºks√©g.
    """
    index = time_options.index(selected_time)
    power_per_batt = BATTERY_DATA[battery_type][index]  # 1 akku teljes√≠tm√©nye enn√©l az id≈ën√©l
    energy_per_batt = power_per_batt * (selected_time / 60)  # 1 akku energiatartalma
    total_energy_required = load_kw * 1000 * target_minutes / 60 / EFFICIENCY  # Sz√ºks√©ges √∂sszes energia (Wh)
    batteries_needed = total_energy_required / energy_per_batt   # Sz√ºks√©ges darabsz√°m (t√∂rt sz√°m lehet)
    return int(batteries_needed) + 1  # Felkerek√≠tj√ºk eg√©sz f√∂l√© (mindig t√∂bb legyen mint kevesebb)


# Streamlit oldal be√°ll√≠t√°sa
st.set_page_config(page_title="UPS Akkuml√°tor M√©retez≈ë", layout="centered")  # Oldal c√≠me √©s elrendez√©se
st.title("üîã UPS Akkumul√°tor M√©retez≈ë")  # F≈ëc√≠m

        
col1, col2 = st.columns(2)  # K√©t oszlopos elrendez√©s a beviteli mez≈ëknek

with col1:
    # Bal oszlop: akku param√©terek
    battery_type = st.selectbox("Akkuml√°tor t√≠pus:", list(BATTERY_DATA.keys()))  # Akku t√≠pus v√°laszt√≥
    backup_time_min = st.selectbox("√Åthidal√°si id≈ë [perc]", time_options,1)          # Id≈ëtartam v√°laszt√≥
    battery_count = st.slider("Akkuml√°torok sz√°ma", min_value=1, max_value=40, value=40)  # Akku darabsz√°m cs√∫szka

with col2:
    # Jobb oszlop: UPS √©s terhel√©s param√©terei
    ups_power_kva = st.number_input("UPS n√©vleges teljes√≠tm√©ny [kVA]", min_value=10.0, max_value=60.0, value=10.0)
    power_factor = st.number_input("Power Factor", min_value=0.8, max_value=1.0, value=0.9)
    load_kw = st.number_input("Terhel√©s [kW]", min_value=0.0, value=9.0)
  
# Sz√°m√≠t√°s gomb megnyom√°sakor
if st.button("Sz√°m√≠t√°s"):

    # Ellen≈ërizz√ºk, hogy a terhel√©s nem nagyobb, mint az UPS val√≥di teljes√≠tm√©nye
    if load_kw > ups_power_kva * power_factor:
        st.error("A terhel√©s nem lehet nagyobb, mint az UPS val√≥s teljes√≠tm√©nye.")
    else:
        # Val√≥s √°thidal√°si id≈ë √©s egy√©b adatok sz√°m√≠t√°sa
        actual_time, power_per_batt, energy_per_batt = calculate_energy_based_backup_time(
            load_kw, battery_type, battery_count, backup_time_min)
        previous_timer, previous_power  = get_previous_power_and_time(battery_type, backup_time_min)
        recommended_battery_count = calculate_required_battery_count(load_kw, battery_type, backup_time_min, backup_time_min)

        # Eredm√©nyek megjelen√≠t√©se a fel√ºleten
        st.subheader("üìä Eredm√©nyek")
        st.markdown(f"**UPS n√©vleges teljes√≠tm√©nye:** {ups_power_kva * power_factor:.2f} kW")
        st.markdown(f"**Leadott teljes√≠tm√©ny vesztes√©ggel (eff = 0.95):** {load_kw / EFFICIENCY:.2f} kW")
        st.markdown(f"**‚úÖ Val√≥s √°thidal√°si id≈ë :** {actual_time:.2f} perc")
        st.markdown(f"**üîã Aj√°nlott akkuml√°tor darabsz√°m a {backup_time_min} perchez:** {recommended_battery_count} db")
        st.markdown(f"**Akkuml√°tor teljes√≠tm√©ny 1 db-ra ({backup_time_min} percn√©l):** {power_per_batt:.2f} W")
        st.markdown(f"**Akkuml√°tor teljes√≠tm√©ny 1 db-ra ( {previous_timer} percn√©l):** {previous_power:.2f} W")
        st.markdown(f"**Energia 1 db akkub√≥l {backup_time_min} perc alatt:** {energy_per_batt:.2f} Wh")
        st.markdown("_K√©plet: id≈ë = (akkuk √∂sszes Wh √ó hat√°sfok / terhel√©s) √ó 60_")
        
        # Marquee (fut√≥ sz√∂veg) az oldal alj√°n
st.markdown(
         """
         <div style="position:fixed; left:0; bottom:0; width:100%; background: #f8e71c; color:#222; text-align:center; padding:8px 0; z-index:1000;">
        <marquee behavior="scroll" direction="left" scrollamount="6">
            üîã UPS m√©retez≈ë | K√©sz√≠tette: Ferosoft | 2025 | Minden jog fenntartva üí°
         </marquee>
        </div>
         """,
unsafe_allow_html=True)
